What happens when you initialize a repository? Why do you need to do it?

A .git directory is created. It contains all of the repository metadeta which holds the history and commits.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows me to track the files that I want in the next commit rather than trying to remember what entirely changed.


How can you use the staging area to make sure you have one commit per logical change?

By diff-ing the staging area, working directory, and repo, I'm able to see all the new changes and manipulate which ones are committed.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches help to organize experimental changes or more than one working production version. Branches deliver this ability because I'm able to checkout each branch on the fly.


How do the diagrams help you visualize the branch structure?

Diagrams make the concept of reachability much easier to understand.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a single branch that holds all of the changes from both original branches.
It is represented this way in the diagram to express that only one branch now exists.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The advantage to Git's sparing use of automatic merges is that bad merges become more avoidable. The disadvantage is that a programmer has to spend time deciding how to manually merge two commits.

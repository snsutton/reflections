How did viewing a diff between two versions of a file help you see the bug
that was introduced?

Using diff takes me to the exact line and difference whereas scanning both
files with my eyes makes the same task much more tedious.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Having that access might prevent you from attempting to implement a previously
failed idea.


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Programming often involves related changes to multiple files in which case having a history that automatically saves and reflects similar changes is helpful and efficient.


What do you think are the pros and cons of manually choosing when to create
a commit, like you do in Git, vs having versions automatically saved, like
Google Docs does?

The benefit of manual saving is that every commit is significant and useful. The
detriment becomes clear when insignifcant versions become overwhelming or when
too many significant changes are bundled into one version.


How can you use the commands git log and git diff to view the history of files?

Using the descriptions printed by git log, you can quickly identify the versions you're looking for. Using gif diff, lets you quickly identify how exactly those files are different.


How might using version control make you more confident to make changes that could break something?

Version control makes identifying the bug very easy, it makes switching back to that version easy as well.


Now that you have your workspace set up, what do you want to try using Git for?

I want to use Git for code sharing.

How did viewing a diff between two versions of a file help you see the bug
that was introduced?

Using diff takes me to the exact line and difference whereas scanning both
files with my eyes makes the same task much more tedious.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Having that access might prevent me from attempting to implement a feature in a way that previously did not work.


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Programming can require making related changes to multiple files, so having a history that automatically saves and reflects those changes is helpful and intuitive.


What do you think are the pros and cons of manually choosing when to create
a commit, like you do in Git, vs having versions automatically saved, like
Google Docs does?

The benefit of manual saving is that every commit is significant and useful. The
detriment becomes clear when insignifcant versions become overwhelming or when
too many significant changes are bundled into one version.


How can you use the commands git log and git diff to view the history of files?

Using the messages printed by git log, I can quickly identify the versions I'm looking for. Using gif diff, I can quickly identify what exactly changed between two commits.


How might using version control make you more confident to make changes that could break something?

Version control makes identifying some bugs very easy, it makes switching back to that version easy as well.


Now that you have your workspace set up, what do you want to try using Git for?

I want to try using Git for class assignments. Sometimes I avoid adding helper functions for fear that I'll break my program which prevents me from ever trying it at all.
